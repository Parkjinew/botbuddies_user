<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smhrd.botbuddies.mapper.UserMapper">
<select id="selectUser" resultType="com.smhrd.botbuddies.entity.User">
select * from USERS
</select>

<select id="signin" parameterType='String' resultType="com.smhrd.botbuddies.entity.User">
select * from USERS where user_id = #{id} and user_pw = MD5(#{password}) and user_role='2'
</select>


<select id="favorite" parameterType='String' resultType="com.smhrd.botbuddies.entity.User">
SELECT 
    s.store_name, 
    ANY_VALUE(s.store_seq) AS store_seq, 
    s.category_seq,
    MIN(s.open_time) AS open_time, -- 집계 함수 사용
    MAX(s.end_time) AS end_time, -- 집계 함수 사용
    ROUND(AVG(r.score),1) AS AverageRating, 
    COUNT(r.title) AS ReviewCount, 
    ANY_VALUE(mi.img_filename) AS STORE_IMG 
FROM 
    USERS m 
INNER JOIN 
    INTEREST i ON m.user_id = i.user_id 
INNER JOIN 
    STORES s ON i.store_seq = s.store_seq 
LEFT JOIN 
    REVIEWS r ON s.store_seq = r.store_seq 
LEFT JOIN 
    STORE_IMG mi ON s.store_seq = mi.store_seq 
WHERE 
    m.user_id = #{id}
GROUP BY 
    s.store_name, s.category_seq
LIMIT 0, 1000
</select>

<select id="orderlist" parameterType="String" resultType="com.smhrd.botbuddies.entity.Order">
SELECT
    s.store_name,
    o.store_seq,
    o.order_num,
	o.total_amount,
    GROUP_CONCAT(DISTINCT m.menu_name) AS menu_names,
    GROUP_CONCAT(DISTINCT si.img_filename) AS image_filenames,
    GROUP_CONCAT(DISTINCT r.review_seq) AS review_seq,
    DATE_FORMAT(order_at, '%Y-%m-%d') AS order_at
FROM
    ORDERS o
JOIN
    MENUS m ON o.store_seq = m.store_seq
JOIN
    STORES s ON o.store_seq = s.store_seq
JOIN
    STORE_IMG si ON s.store_seq = si.store_seq
    LEFT JOIN
    REVIEWS r ON s.store_seq = r.store_seq AND o.order_num = r.order_num
WHERE
    o.user_id = #{id}
GROUP BY
    o.order_num, s.store_name, o.total_amount, o.store_seq, DATE_FORMAT(order_at, '%Y-%m-%d')
ORDER BY
    DATE_FORMAT(order_at, '%Y-%m-%d')
LIMIT 0, 1000


</select>

<select id="storeSeq">
 SELECT store_seq FROM STORES WHERE store_name = #{storeName}
</select>

<select id="userNick">
select user_nick from USERS where user_id = #{id}
</select>

<insert id="reviewWrite">
    INSERT INTO REVIEWS (user_id, store_seq, order_num, score, title, details)
    VALUES (#{nick}, #{storeSeq},#{orderNum}, #{rating}, #{reviewTitle}, #{reviewText})
</insert>

<select id="reviewSeq" resultType="Integer">
 SELECT review_seq FROM REVIEWS WHERE  user_id = #{nick} AND 
    title = #{reviewTitle} AND
    details = #{reviewText} AND 
    store_seq = #{storeSeq} 
</select>

<insert id="reviewImg" parameterType="map">
    INSERT INTO REVIEW_IMG (review_seq, img_filename)
       VALUES (#{review_seq}, #{photos})
      
</insert>

<select id="reviewModify" resultType="com.smhrd.botbuddies.entity.ReviewMa">
SELECT
    RV.review_seq,
    RV.user_id,
    RV.store_seq,
    RV.title,
    RV.details,
    RV.answer,
    RV.score,
    ST.store_name,
    DATE_FORMAT(RV.create_at, '%Y-%m-%d') AS review_date,
    GROUP_CONCAT(RI.img_filename) AS image_filenames
FROM
    USERS US
JOIN
    REVIEWS RV ON US.user_nick = RV.user_id
JOIN
    STORES ST ON RV.store_seq = ST.store_seq
LEFT JOIN
    REVIEW_IMG RI ON RV.review_seq = RI.review_seq
WHERE
    US.user_id = #{id}
GROUP BY
    RV.review_seq, RV.user_id, RV.store_seq, RV.title, RV.details, RV.score, ST.store_name,  RV.create_at
</select>

<delete id="deleteImg">
     DELETE FROM REVIEW_IMG WHERE review_seq = #{review_seq}
</delete>
<delete id="reviewDelete">
     DELETE FROM REVIEWS WHERE review_seq = #{review_seq}
</delete>

<select id="reservaList" resultType="com.smhrd.botbuddies.entity.Reservation">
SELECT 
    R.reserve_seq,
    R.reserve_name, 
    R.reserve_date, 
    R.reserve_time, 
    R.reserve_num, 
    R.state, 
    S.store_name,
    S.store_seq
FROM 
    RESERVATIONS R
JOIN 
    STORES S ON R.store_seq = S.store_seq
WHERE 
    R.user_id = #{id} AND 
    R.state IN (0, 1)
ORDER BY 
    R.state DESC, R.reserve_date, R.reserve_time
</select>

<delete id="reserveCancle">
delete from RESERVATIONS where reserve_seq = #{id};
</delete>

<insert id="userInquiry">
INSERT INTO INQUIRIES (user_id, title, details)
VALUES (#{id}, #{title}, #{content})
</insert>
</mapper>